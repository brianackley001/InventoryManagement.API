trigger:
- '*'

pool:
  vmImage: 'ubuntu-16.04'

variables:
  buildConfiguration: 'Release'
  dotnetSdkVersion: '3.1.100'
  sourceBranchName: 'develop'
  releaseBranchName: 'master'

schedules:
  - cron: "8 0 * * *"
    displayName: Daily Midnight Build
    branches:
      include:
      - develop
    always: true

stages:
- stage: 'Build'
  displayName: 'Build the API application'
  jobs:
  - job: 'Build'
    displayName: 'Build job'

    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET Core SDK $(dotnetSdkVersion)'
      inputs:
        version: '$(dotnetSdkVersion)'

    - script: 'echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)" > buildinfo.txt'
      displayName: 'Write build info'

      
    - task: UseDotNet@2
      displayName: 'Use .NET Core SDK 2.1.505 for SonarCloud'
      inputs:
        version: '2.1.505'

    - task: PowerShell@2
      displayName: 'Generate Build Number for CI Pipeline'
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "Generating Build Number"
          $baseDate = [datetime]"01/01/2011"
          $currentDate = $(Get-Date)
          $interval = NEW-TIMESPAN –Start $baseDate –End $currentDate
          $days = $interval.Days
          
          Write-Host "##vso[task.setvariable variable=customBuildNumber]1.0.$days.$(Build.BuildId)"
        errorActionPreference: 'continue'

    - task: DotNetCoreCLI@2
      displayName: 'Restore project dependencies'
      inputs:
        command: 'restore'
        projects: '**/*.csproj'

    - task: SonarCloudPrepare@1
      displayName: 'Prepare SonarCloud analysis'
      inputs:
        SonarCloud: 'SonarCloud Service Connection'
        organization: '$(SonarOrganization)'
        projectKey: '$(SonarProjectKey)'
        projectName: '$(SonarProjectName)'
        projectVersion: '$(Build.BuildNumber)'
        extraProperties: |
          sonar.cs.opencover.reportsPaths=$(Build.SourcesDirectory)/TestResults/Coverage/coverage.opencover.xml
          sonar.exclusions=**/wwwroot/lib/**/*
      condition: succeeded()
         
    - task: DotNetCoreCLI@2
      displayName: 'Build the project - $(buildConfiguration)'
      inputs:
        command: 'build'
        arguments: '--no-restore --configuration $(buildConfiguration) /p:Version=$(customBuildNumber)'
        projects: '**/*.sln'

    - task: DotNetCoreCLI@2
      displayName: 'Install ReportGenerator'
      inputs:
        command: custom
        custom: tool
        arguments: 'install --global dotnet-reportgenerator-globaltool'

    - task: DotNetCoreCLI@2
      displayName: 'Run unit tests - $(buildConfiguration)'
      inputs:
        command: 'test'
        arguments: '--no-build --configuration $(buildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=$(Build.SourcesDirectory)/TestResults/Coverage/'
        publishTestResults: true
        projects: '**/*.UnitTest.csproj'

    - script: |
        reportgenerator -reports:$(Build.SourcesDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/CodeCoverage -reporttypes:HtmlInline_AzurePipelines
      displayName: 'Create code coverage report'

      
    - task: SonarCloudAnalyze@1
      displayName: 'Run SonarCloud code analysis'
      condition: succeeded()

    - task: PublishCodeCoverageResults@1
      displayName: 'Publish code coverage report'
      inputs:
        codeCoverageTool: 'cobertura'
        summaryFileLocation: '$(Build.SourcesDirectory)/**/coverage.cobertura.xml'

    - task: DotNetCoreCLI@2
      displayName: 'Publish the project - $(buildConfiguration)'
      inputs:
        command: 'publish'
        projects: '**/InventoryManagement.API.csproj'
        publishWebProjects: false
        arguments: '--no-build --configuration $(buildConfiguration) /p:Version=$(customBuildNumber) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
        zipAfterPublish: true


    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: drop'
      condition: succeeded()
    - task: WhiteSource Bolt@20
      displayName: "Whitesource Bolt"
      condition: eq(variables['Build.Reason'], 'Schedule')
      
    - task: SonarCloudPublish@1
      condition: succeeded()

   
- stage: 'UatRelease'
  displayName: 'Deploy the API application to UAT'
  dependsOn: Build
  condition: |
    and
    (
      succeeded(),
      eq(variables['Build.SourceBranchName'], variables['sourceBranchName']),
      ne(variables['Build.Reason'], 'Schedule')
    )
  jobs:
  - deployment: Deploy
    pool:
      vmImage: 'ubuntu-16.04'
    environment: UAT
    variables:
    - group: Release
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop

- stage: 'ProductionRelease'
  displayName: 'Release the API application to Prod'
  dependsOn: Build
  condition: |
    and
    (
      succeeded(),
      eq(variables['Build.SourceBranchName'], variables['releaseBranchName'])
    )
  jobs:
  - deployment: Deploy
    pool:
      vmImage: 'ubuntu-16.04'
    environment: Production
    variables:
    - group: Release
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop
